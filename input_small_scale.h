#ifndef INPUT_H_LE
#define INPUT_H_LE


//Settings of the algorithm parameters
const float SEED = 0.123;//Used to generate random numbers 
const unsigned int POPSIZE = 200; //Population size, multiple of 4
const unsigned int NGEN = 500; //Number of generations
const unsigned char NOBJ = 2; //Number of objective functions
const float PCROSS = 0.9; //Probability of crossover
const float PMUT = 0.1; //Probability of mutation
const float PADD_NODE = 0.9; //Probability of adding a node to the shortest path in the initial population

//Report results
const unsigned char ALL_POP_WITH_PATH = 1; //1(y) or 0(n) //Reports all pop with path or not
const unsigned short REPORT_EVERY_GEN = 100;  //Report all pop every generation. Example: REPORT_EVERY_GEN = 100 reports all pop every 100 generation.


/*Uncomment to choose the instance*/

//Choose network
  #define SMALL_SCALE_NETWORK



/*Choose initial demand with period T = 20*/
//#define D1T20
//#define D2T20
//#define D3T20
//#define D4T20
  #define D5T20


/*Choose initial demand with period T = 50*/
//#define D1T50
//#define D2T50
//#define D3T50
//#define D4T50
//#define D5T50



//Define network
#ifdef SMALL_SCALE_NETWORK

    //Node's informations
    const unsigned short N = 100;
    const unsigned short energia_inicial = 100;
    
    
    //Adjacency lists
    const unsigned short adj_list[100][25] = { 
        {8,34,38,50,57,67,80,87,96},
        {7, 43, 44, 45, 54, 68, 92, 94}, 
        {7, 43, 45, 54, 66}, 
        {4, 12, 63}, 
        {3, 12, 17, 56, 63}, 
        {8, 18, 27, 37, 59, 62, 64, 71, 83, 93}, 
        {10, 73, 79}, 
        {1, 2, 43, 45, 54, 66, 68, 92, 94}, 
        {0, 5, 24, 31, 34, 37, 64, 67, 87}, 
        {11, 18, 27, 36, 42, 64, 83, 84}, 
        {6, 35, 52, 58, 73, 79, 82, 85, 88, 95, 98}, 
        {9, 18, 20, 27, 36, 62, 83, 84}, 
        {3, 4, 56, 63}, 
        {14, 47, 74, 77, 78, 91}, 
        {13, 47, 76, 77, 78, 91}, 
        {17, 26, 30, 32, 49, 69, 86, 96}, 
        {25, 28, 39, 40, 46, 53, 99}, 
        {4, 15, 30, 44, 86, 96}, 
        {5, 9, 11, 27, 37, 42, 62, 83, 84}, 
        {29, 32, 43, 45, 49, 51, 65, 66, 68, 69, 70, 92}, 
        {11, 36}, 
        {25, 41, 46}, 
        {26, 32, 34, 38, 50, 57, 65, 80, 87}, 
        {66, 75}, 
        {8, 28, 31, 40, 46, 48, 67, 87}, 
        {16, 21, 39, 40, 41}, 
        {15, 22, 32, 49, 57, 65, 69, 70, 80, 86}, 
        {5, 9, 11, 18, 36, 37, 62, 64, 83, 84, 93}, 
        {16, 24, 31, 40, 77, 91, 97, 99}, 
        {19, 32, 49, 51, 65, 66, 69, 70, 81, 82, 85, 90, 92}, 
        {15, 17, 44, 86, 96}, 
        {8, 24, 28, 48, 67, 87}, 
        {15, 19, 22, 26, 29, 34, 38, 49, 50, 51, 57, 65, 69, 70, 81, 86, 90}, 
        {53, 77, 91, 97, 99}, 
        {0, 8, 22, 32, 38, 50, 57, 71, 80, 87}, 
        {10, 50, 58, 59, 71, 79, 88}, 
        {9, 11, 20, 27, 84}, 
        {5, 8, 18, 27, 62, 64, 71, 83, 93}, 
        {0, 22, 32, 34, 50, 57, 80, 87}, 
        {16, 25, 41, 53}, 
        {16, 24, 25, 28, 46, 48, 96}, 
        {21, 25, 39}, 
        {9, 18, 64, 74, 84}, 
        {1, 2, 7, 19, 44, 45, 54, 66, 68, 92, 94}, 
        {1, 17, 30, 43, 45, 68, 69, 92}, 
        {1, 2, 7, 19, 43, 44, 66, 68, 69, 92}, 
        {16, 21, 24, 40, 48, 96}, 
        {13, 14, 74, 77, 78, 91}, 
        {24, 31, 40, 46, 67, 80, 87, 96}, 
        {15, 19, 26, 29, 32, 57, 65, 68, 69, 70, 86, 92}, 
        {0, 22, 32, 34, 35, 38, 57, 58, 71, 88}, 
        {19, 29, 32, 57, 61, 65, 70, 81, 82, 85, 90, 98}, 
        {10, 61, 75, 82, 85, 95, 98}, 
        {16, 33, 39, 99}, 
        {1, 2, 7, 43, 66}, 
        {}, 
        {4, 12, 63}, 
        {0, 22, 26, 32, 34, 38, 49, 50, 51, 65, 70, 81, 88, 90}, 
        {10, 35, 50, 59, 73, 79, 88, 98}, 
        {5, 35, 58, 62, 71, 88, 93}, 
        {}, 
        {51, 52, 75, 82, 85, 95, 98}, 
        {5, 11, 18, 27, 37, 59, 64, 83, 84, 93}, 
        {3, 4, 12, 56}, 
        {5, 8, 9, 27, 37, 42, 62, 83, 84}, 
        {19, 22, 26, 29, 32, 49, 51, 57, 69, 81, 90}, 
        {2, 7, 19, 23, 29, 43, 45, 54, 68, 92}, 
        {0, 8, 24, 31, 48, 80, 87}, 
        {1, 7, 19, 43, 44, 45, 49, 66, 69, 92}, 
        {15, 19, 26, 29, 32, 44, 45, 49, 65, 68, 70, 86, 92}, 
        {19, 26, 29, 32, 49, 51, 57, 69, 81, 82, 90, 92}, 
        {5, 34, 35, 37, 50, 59, 93}, 
        {}, 
        {6, 10, 58, 79}, 
        {13, 42, 47, 77}, 
        {23, 52, 61, 95}, 
        {14, 78}, 
        {13, 14, 28, 33, 47, 74, 91, 97}, 
        {13, 14, 47, 76}, 
        {6, 10, 35, 58, 73, 88, 98}, 
        {0, 22, 26, 34, 38, 48, 67, 87, 96}, 
        {29, 32, 51, 57, 65, 70, 82, 85, 98}, 
        {10, 29, 51, 52, 61, 70, 81, 85, 88, 90, 95}, 
        {5, 9, 11, 18, 27, 37, 62, 64, 84, 93}, 
        {9, 11, 18, 27, 36, 42, 62, 64, 83}, 
        {10, 29, 51, 52, 61, 81, 82, 88, 90, 95, 98}, 
        {15, 17, 26, 30, 32, 49, 69, 96}, 
        {0, 8, 22, 24, 31, 34, 38, 48, 67, 80, 96}, 
        {10, 35, 50, 57, 58, 59, 79, 82, 85, 90, 98}, 
        {}, 
        {29, 32, 51, 57, 65, 70, 82, 85, 88, 98}, 
        {13, 14, 28, 33, 47, 77, 97}, 
        {1, 7, 19, 29, 43, 44, 45, 49, 66, 68, 69, 70}, 
        {5, 27, 37, 59, 62, 71, 83}, 
        {1, 7, 43}, 
        {10, 52, 61, 75, 82, 85, 98}, 
        {0, 15, 17, 30, 40, 46, 48, 80, 86, 87}, 
        {28, 33, 77, 91}, 
        {10, 51, 52, 58, 61, 79, 81, 85, 88, 90, 95}, 
        {16, 28, 33, 53}
    };

    //Size of adjacency lists
    const unsigned short adj_list_size[100] = {9,8,5,3,5,10,3,9,9,8,11,8,4,6,6,8,7,6,9,12,2,3,9,2,8,5,10,11,8,13,5,6,17,5,10,7,5,9,8,4,7,3,5,11,8,10,6,6,8,12,10,12,7,4,5,0,3,14,8,7,0,7,10,4,9,11,10,7,10,13,12,7,0,4,4,4,2,8,4,7,9,9,11,10,9,11,8,11,11,0,10,7,12,7,3,7,10,4,11,4};


#endif
      
#endif /* INPUT_H */